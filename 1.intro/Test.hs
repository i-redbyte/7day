module Test where
-- 1.2 ФУНКЦИИ
{-
  Реализуйте функцию трех аргументов lenVec3, которая вычисляет длину трехмерного вектора.
  Аргументы функции задают декартовы координаты конца вектора, его начало подразумевается находящимся в начале координат.
  Для извлечения квадратного корня воспользуйтесь функцией sqrt, определенной в стандартной библиотеке.
-}
-- Example:
-- run gchi
-- :load Test
-- lenVec3 0 2 0
lenVec3 x y z = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
{-
  Напишите реализацию функции sign, которая возвращает 1, если ей передано положительное число, (-1),
  если отрицательное, и 0 в случае, когда передан 0.
-}

sign x = if x == 0 then 0 else if x > 0 then 1 else (-1)

-- 1.3 Операторы

infix 6 |-|
x |-| y = if x - y >= 0 then x - y else (-1) * (x - y)

{-
Используя оператор $, перепишите выражение logBase 4 (min 20 (9 + 7)) без скобок. (Разделяйте все токены одним пробелом.)
-}

solution1_3 = logBase 4 $ min 20 $ 9 + 7

-- 1.4 Базовые типы
{-
Вспомним функцию discount, которая возвращала итоговую сумму покупки с возможной скидкой.
В качестве параметров ей передавались сумма без скидки sum, процент скидки proc, причем скидка начислялась,
если переданная сумма превышает порог limit. Все эти параметры, как и возвращаемое значение, можно хранить в типе Double.
(Здесь следует отметить, что в реальных финансовых приложениях использовать тип с плавающей точкой для хранения подобной
информации не рекомендуется.) Тип функции можно задать в файле исходного кода вместе с ее определением:

discount :: Double -> Double -> Double -> Double
discount limit proc sum = if sum >= limit then sum * (100 - proc) / 100 else sum

Отметим, что объявление типа необязательно, хотя часто рекомендуется в качестве документации.
Его обычно располагают перед определением функции, хотя это объявление верхнего уровня можно
расположить в любом месте файла с исходным кодом.

Запишите тип функции standardDiscount, определенной как частичное применение функции discount:

standardDiscount :: ???
standardDiscount = discount 1000 5
-}

discount :: Double -> Double -> Double -> Double
discount limit proc sum = if sum >= limit then sum * (100 - proc) / 100 else sum

standardDiscount :: Double -> Double
standardDiscount = discount 1000 5